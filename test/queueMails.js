'use strict'
/* eslint-disable no-unused-expressions */
/* global describe, it  before beforeEach after */
// tests for queueMails
// Generated by serverless-mocha-plugin

const AWS = require('aws-sdk-mock')
const mochaPlugin = require('serverless-mocha-plugin')
const aws = require('aws-sdk')
AWS.setSDKInstance(aws)

const expect = mochaPlugin.chai.expect
const wrapped = mochaPlugin.getWrapper('queueMails', '/src/queueMails/handler.js', 'queueMails')

const fixtures = require('./fixtures/index')

const setupEnvironment = require('./setups/environment')

const apiPayload = {
  body: JSON.stringify(fixtures.apiPayload)
}
describe('Queue Emails to SQS', () => {
  before((done) => {
    setupEnvironment.mock()
    done()
  })

  after((done) => {
    setupEnvironment.restore()
    done()
  })

  beforeEach((done) => {
    // Mock the SQS.sendMessage method
    AWS.mock('SQS', 'sendMessage', (params, callback) => {
      callback(null, {
        MessageBody: 'message-body',
        QueueUrl: 'https://your.queue.url'
      })
    })

    done()
  })

  it('Should return non-empty error response', () => {
    return wrapped.run({}).then((response) => {
      expect(response).to.not.be.empty
      expect(response).to.have.property('statusCode').to.equal(400)
    })
  })

  it('Should return a successful response', () => {
    return wrapped.run(apiPayload).then((response) => {
      expect(response).to.not.be.empty
      expect(response).to.have.property('statusCode').to.equal(201)
    })
  })
})
